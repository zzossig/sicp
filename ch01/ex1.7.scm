; nothing different
(define (improve guess x)
  (average guess (/ x guess)))
(define (average x y)
  (/ (+ x y) 2))
(define (abs x)
  (if (< x 0)
      (- x)
      x))
(define (square x)
  (* x x))
(define (!= x y)
  (if (= x y) #f #t))
(define (calc guess x)
  (abs (- (square guess) x)))
(define (good-enough? guess x)
  (< (calc guess x) 0.001))
(define (prev-enough? guess x)
  (< 
    (abs 
      (- (square guess) (square (improve guess x))))
    (abs
      (- (square (improve guess x)) (square (improve (improve guess x) x))))
    ))
(define (sqrt-iter guess x)
  (cond ((good-enough? guess x) guess)
        ((prev-enough? guess x) guess)
        (else (sqrt-iter (improve guess x) x))
        ))
(define (sqrt x)
  (sqrt-iter 1.0 x))

(sqrt 1000000000000000000000000000000000000)
(sqrt 0.00000000000000000000000000000000001)
